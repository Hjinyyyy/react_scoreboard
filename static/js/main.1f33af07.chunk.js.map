{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","redux/actions.js","redux/actonTypes.js","components/Player.js","components/AddPlayerForm.js","App.js","serviceWorker.js","redux/reducers/player.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Stats","props","players","length","totalScore","_","sumBy","className","Stopwatch","state","isRunning","timer","tick","setState","prevState","handleStopwatch","this","tickRef","setInterval","clearInterval","onClick","React","Component","Header","console","log","title","Counter","changeScore","id","score","connect","dispatch","delta","type","Player","useDispatch","name","AddPlayerForm","value","submit","e","preventDefault","addPlayer","handleValueChange","target","onSubmit","placeholder","required","onChange","App","map","player","key","playerReducer","Boolean","window","location","hostname","match","maxId","playerInitialState","allReducers","combineReducers","action","push","forEach","filter","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAGaA,EAAQ,SAACC,GACpB,IAAMC,EAAUD,EAAMC,QAAQC,OAC1BC,EAAaC,IAAEC,MAAML,EAAMC,QAAS,SAGxC,OACE,2BAAOK,UAAU,SACf,+BACA,4BACE,wCACA,4BAAKL,IAEP,4BACE,4CACA,4BAAKE,OCfAI,EAAb,4MAEEC,MAAQ,CACNC,WAAW,EACXC,MAAO,GAJX,EAOEC,KAAO,WACD,EAAKH,MAAMC,WACb,EAAKG,UAAS,SAAAC,GAAS,MAAK,CAC1BH,MAAOG,EAAUH,MAAQ,OAVjC,EA0BEI,gBAAkB,WAChB,EAAKF,UAAS,SAAAC,GACZ,EAAKD,SAAS,CAACH,WAAYI,EAAUJ,gBA5B3C,kEAiBIM,KAAKC,QAAUC,YAAYF,KAAKJ,KAAM,OAjB1C,6CAuBIO,cAAcH,KAAKC,WAvBvB,+BAiCI,OACE,yBAAKV,UAAU,aACb,yCACA,0BAAMA,UAAU,kBAAkBS,KAAKP,MAAME,OAC7C,4BAAQS,QAASJ,KAAKD,iBAAkBC,KAAKP,MAAMC,UAAY,OAAS,SACxE,8CAtCR,GAA+BW,IAAMC,WCExBC,EAAS,SAACtB,GAErB,OADAuB,QAAQC,IAAIxB,GAEV,4BAAQM,UAAU,UAChB,kBAAC,EAAD,CAAOL,QAASD,EAAMC,UACtB,wBAAIK,UAAU,MAAMN,EAAMyB,OAC1B,kBAAC,EAAD,Q,OCNOC,EAAb,uKACY,IAAD,OACP,OACE,yBAAKpB,UAAU,WACb,4BAAQA,UAAU,2BACVa,QAAS,kBAAM,EAAKnB,MAAM2B,YAAY,EAAK3B,MAAM4B,IAAK,KAD9D,MAEA,0BAAMtB,UAAU,iBAAiBS,KAAKf,MAAM6B,OAE5C,4BAAQvB,UAAU,2BACVa,QAAS,kBAAM,EAAKnB,MAAM2B,YAAY,EAAK3B,MAAM4B,GAAI,KAD7D,YARR,GAA6BR,IAAMC,WAqBpBS,cAAQ,MANE,SAACC,GAAD,MAAe,CAEtCJ,YAAa,SAACC,EAAII,GAAL,OAAeD,ECRH,SAACH,EAAII,GAAL,MAAgB,CACzCC,KCb0B,eDc1BL,KACAI,SDKqCL,CAAYC,EAAII,QAIxCF,CAAgCJ,GGPhCQ,EAbO,SAAClC,GACrB,IAAM+B,EAAWI,cACjB,OACE,yBAAK7B,UAAU,UACf,0BAAMA,UAAU,eACZ,4BAAQA,UAAU,gBAAgBa,QAAS,kBAAMY,EFSpB,CACnCE,KClB2B,gBDmB3BL,GEX6E5B,EAAM4B,OAA7E,OACC5B,EAAMoC,MAET,kBAAC,EAAD,CAASR,GAAI5B,EAAM4B,GAAIC,MAAO7B,EAAM6B,UCT7BQ,EAAb,4MACE7B,MAAQ,CACN8B,MAAO,IAFX,EAKEC,OAAS,SAACC,GAERA,EAAEC,iBACF,EAAKzC,MAAM0C,UAAU,EAAKlC,MAAM8B,OAChC,EAAK1B,SAAS,CAAC0B,MAAO,MAT1B,EAYEK,kBAAoB,SAACH,GACnB,EAAK5B,SAAS,CAAE0B,MAAOE,EAAEI,OAAON,SAbpC,uDAiBI,OACE,0BAAMhC,UAAU,OAAOuC,SAAU9B,KAAKwB,QACpC,2BAAON,KAAK,OAAO3B,UAAU,QAAQwC,YAAY,sBAAsBC,UAAQ,EACxET,MAAOvB,KAAKP,MAAM8B,MAAOU,SAAUjC,KAAK4B,oBAC/C,2BAAOV,KAAK,SAAS3B,UAAU,QAAQgC,MAAM,aArBrD,GAAmClB,IAAMC,WAmC1BS,cAAQ,MANE,SAACC,GAAD,MAAe,CAEtCW,UAAW,SAACN,GAAD,OAAUL,EH3BE,SAACK,GAAD,MAAW,CAClCH,KCTwB,aDUxBG,QGyB8BM,CAAUN,QAI3BN,CAAgCO,GC9BzCY,E,uKAYF,OACE,yBAAK3C,UAAU,cACb,kBAAC,EAAD,CAAQmB,MAAM,gBAAgBxB,QAASc,KAAKf,MAAMC,UAGhDc,KAAKf,MAAMC,QAAQiD,KAAI,SAAAC,GAAM,OACzB,kBAAC,EAAD,CAAQf,KAAMe,EAAOf,KAAMgB,IAAKD,EAAOvB,GAAIA,GAAIuB,EAAOvB,GAAIC,MAAOsB,EAAOtB,WAK9E,kBAAC,EAAD,W,GAvBUT,IAAMC,WAqCTS,eANS,SAACtB,GAAD,MAAY,CAElCP,QAASO,EAAM6C,cAAcpD,WAIhB6B,CAAyBmB,GClCpBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BChBFC,EAAQ,EAENC,EAAqB,CACzB3D,QAAS,CACP,CAAEmC,KAAM,MAAOR,GAAI,EAAGC,MAAO,GAC7B,CAAEO,KAAM,OAAQR,GAAI,EAAGC,MAAO,GAC9B,CAAEO,KAAM,MAAOR,GAAI,EAAGC,MAAO,GAC7B,CAAEO,KAAM,MAAOR,GAAI,EAAGC,MAAO,KCNpBgC,EAAcC,YAAgB,CACzCT,cDS2B,WAAyC,IAChEpD,EADwBO,EAAuC,uDAA/BoD,EAAoBG,EAAW,uCAEnE,OAAOA,EAAO9B,MACZ,ILhBsB,aKmBpB,OAFAhC,EAAO,YAAQO,EAAMP,UACb+D,KAAK,CAAC5B,KAAM2B,EAAO3B,KAAMR,KAAM+B,EAAO9B,MAAO,IAC9C,2BACFrB,GADL,IAEEP,YAGJ,ILvBwB,eK8BtB,OANAA,EAAO,YAAQO,EAAMP,UACbgE,SAAQ,SAAAd,GACVA,EAAOvB,KAAOmC,EAAOnC,KACvBuB,EAAOtB,OAASkC,EAAO/B,UAGpB,2BACFxB,GADL,IAEEP,YAGJ,ILlCyB,gBKoCvB,OADAA,EAAUO,EAAMP,QAAQiE,QAAO,SAAAf,GAAM,OAAIA,EAAOvB,KAAOmC,EAAOnC,MACvD,2BACFpB,GADL,IAEEP,YAIN,OAAOO,KEzCI2D,EAAQC,YAAYP,EAC/BN,OAAOc,8BAAgCd,OAAOc,gCCIhDC,IAASC,OAAO,kBAAC,IAAD,CAAUJ,MAAOA,GAAO,kBAAC,EAAD,OAAoBK,SAASC,eAAe,SJ2H9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1f33af07.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nexport const Stats = (props) => {\n  const players = props.players.length;\n  let totalScore = _.sumBy(props.players, 'score');\n  // props.players.forEach(player => totalScore += player.score);\n\n  return (\n    <table className=\"stats\">\n      <tbody>\n      <tr>\n        <td>Players:</td>\n        <td>{players}</td>\n      </tr>\n      <tr>\n        <td>Total Score:</td>\n        <td>{totalScore}</td>\n      </tr>\n      </tbody>\n    </table>\n  );\n}","import React from 'react';\n\nexport class Stopwatch extends React.Component {\n  tickRef;\n  state = {\n    isRunning: false,\n    timer: 0\n  }\n\n  tick = () => {\n    if (this.state.isRunning) {\n      this.setState(prevState => ({\n        timer: prevState.timer + 1\n      }))\n    }\n  }\n  // Dom이 렌더링 된 직후에 호출되는 라이프 사이클 메서드\n  // Rest API 호출, 3rd 라이브러리 로딩\n  componentDidMount() {\n    this.tickRef = setInterval(this.tick, 1000);\n  }\n\n  // Dom이 파괴되기 직전에 호출되는 라이프사이클 메서드\n  // 리소스 해제\n  componentWillUnmount() {\n    clearInterval(this.tickRef);\n  }\n\n  handleStopwatch = () => {\n    this.setState(prevState => {\n      this.setState({isRunning: !prevState.isRunning});\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"stopwatch\">\n        <h2>Stopwatch</h2>\n        <span className=\"stopwatch-time\">{this.state.timer}</span>\n        <button onClick={this.handleStopwatch}>{this.state.isRunning ? 'Stop' : 'Start'}</button>\n        <button>Reset</button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {Stats} from \"./Stats\";\nimport {Stopwatch} from \"./Stopwatch\";\n\nexport const Header = (props) => {\n  console.log(props);\n  return (\n    <header className=\"header\">\n      <Stats players={props.players} />\n      <h1 className=\"h1\">{props.title}</h1>\n      <Stopwatch></Stopwatch>\n    </header>\n  );\n}","import React from \"react\";\nimport {changeScore} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\n\nexport class Counter extends React.Component {\n  render() {\n    return (\n      <div className=\"counter\">\n        <button className=\"counter-action decrement\"\n                onClick={() => this.props.changeScore(this.props.id, -1)}> -</button>\n        <span className=\"counter-score\">{this.props.score}</span>\n        {/*이벤트 핸들러 우측에는 함수 선언문이 와야 한다.*/}\n        <button className=\"counter-action increment\"\n                onClick={() => this.props.changeScore(this.props.id, 1)}> + </button>\n      </div>\n    );\n  }\n}\n\nconst mapActionToProps = (dispatch) => ({\n  // 왼쪼은 props, 오른쪽은 (액션을 디스패치하는)펑션\n  changeScore: (id, delta) => dispatch(changeScore(id, delta))\n})\n\n// 커링 펑션, HoC 컴포넌튼\nexport default connect(null, mapActionToProps)(Counter);","// action creator: 액션을 (동적으로) 만드는 함수\nimport {ADD_PLAYER, CHANGE_SCORE, REMOVE_PLAYER} from \"./actonTypes\";\n\nexport const updateUser = (name) => ({\n  type: 'updateUser',\n  payload: name\n})\n\nexport const addPlayer = (name) => ({\n  type: ADD_PLAYER,\n  name\n})\n\nexport const changeScore = (id, delta) => ({\n  type: CHANGE_SCORE,\n  id,\n  delta\n})\n\nexport const removePlayer = (id) => ({\n  type: REMOVE_PLAYER,\n  id\n})","export const ADD_PLAYER = 'ADD_PLAYER';\nexport const CHANGE_SCORE = 'CHANGE_SCORE';\nexport const REMOVE_PLAYER = 'REMOVE_PLAYER';","import React from \"react\";\nimport Counter from \"./Counter\";\nimport {removePlayer} from \"../redux/actions\";\nimport {useDispatch} from \"react-redux\";\n\nexport const Player = (props) => {\n  const dispatch = useDispatch();\n  return (\n    <div className=\"player\">\n\t\t  <span className=\"player-name\">\n        <button className=\"remove-player\" onClick={() => dispatch(removePlayer(props.id))}> x </button>\n        {props.name}\n      </span>\n      <Counter id={props.id} score={props.score} />\n    </div>\n  );\n}\n// 커링 펑션, HoC 컴포넌튼\nexport default Player;","import React from 'react';\nimport {addPlayer} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\n\nexport class AddPlayerForm extends React.Component {\n  state = {\n    value: ''\n  }\n\n  submit = (e) => {\n    // form의 기본 이벤트 막기\n    e.preventDefault();\n    this.props.addPlayer(this.state.value);\n    this.setState({value: ''})\n  }\n\n  handleValueChange = (e) => {\n    this.setState({ value: e.target.value})\n  }\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.submit}>\n        <input type=\"text\" className=\"input\" placeholder=\"enter a player name\" required\n               value={this.state.value} onChange={this.handleValueChange}/>\n        <input type=\"submit\" className=\"input\" value=\"Add\"></input>\n      </form>\n    );\n  }\n}\n\n// 자식 => 부모 통신: 펑션을 props로 전달\n// action dispatch : (액션을 디스패치하는) 펑션을 props 로 매핑\nconst mapActionToProps = (dispatch) => ({\n  // 왼쪼은 props, 오른쪽은 (액션을 디스패치하는)펑션\n  addPlayer: (name) => dispatch(addPlayer(name))\n})\n\n// 커링 펑션, HoC 컴포넌튼\nexport default connect(null, mapActionToProps)(AddPlayerForm);","import React from 'react';\nimport './App.css';\nimport {Header} from './components/Header';\nimport Player from \"./components/Player\";\nimport AddPlayerForm from \"./components/AddPlayerForm\";\nimport {connect} from \"react-redux\";\n\nlet maxId = 4;\n\nclass App extends React.Component {\n\n/*  handleRemovePlayer = (id) => {\n    console.log('handleRemovePlayer: ', id);\n    this.setState(prevState => {\n      const players = prevState.players.filter(player => player.id !== id);\n      return {\n        players: players\n      }\n    })\n  }*/\n  render() {\n    return (\n      <div className=\"scoreboard\">\n        <Header title=\"My Scoreboard\" players={this.props.players}></Header>\n\n        {\n          this.props.players.map(player => (\n              <Player name={player.name} key={player.id} id={player.id} score={player.score}>\n              </Player>\n            )\n          )\n        }\n        <AddPlayerForm></AddPlayerForm>\n      </div>\n    );\n  }\n}\n\n// subscribe: store의 state => 나의, props로 매핑\n// 부모 => 자식 통신\nconst mapStateToProps = (state) => ({\n  // 왼쪽이 props, 오른쪽이 store의 state\n  players: state.playerReducer.players\n})\n\n// 커링 펑션, HoC 컴포넌튼\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_PLAYER, CHANGE_SCORE, REMOVE_PLAYER} from \"../actonTypes\";\n\nlet maxId = 4;\n\nconst playerInitialState = {\n  players: [\n    { name: 'LDK', id: 1, score: 0},\n    { name: 'PARK', id: 2, score: 0},\n    { name: 'KIM', id: 3, score: 0},\n    { name: 'LEE', id: 4, score: 0}\n  ]\n}\n\nexport const playerReducer = (state = playerInitialState, action) => {\n  let players;\n  switch(action.type) {\n    case ADD_PLAYER:\n      players = [ ...state.players ];\n      players.push({name: action.name, id: ++maxId, score: 0});\n      return {\n        ...state,\n        players\n      }\n\n    case CHANGE_SCORE:\n      players = [ ...state.players ];\n      players.forEach(player => {\n        if (player.id === action.id) {\n          player.score += action.delta;\n        }\n      })\n      return {\n        ...state,\n        players\n      }\n\n    case REMOVE_PLAYER:\n      players = state.players.filter(player => player.id !== action.id);\n      return {\n        ...state,\n        players\n      }\n  }\n\n  return state;\n}","import {combineReducers} from \"redux\";\nimport {playerReducer} from \"./player\";\n\nexport const allReducers = combineReducers({\n  playerReducer\n})\n// state = {\n//   playerReducer\n// }","import {createStore} from \"redux\";\nimport {allReducers} from \"./reducers\";\n\nexport const store = createStore(allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}